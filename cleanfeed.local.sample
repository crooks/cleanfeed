# vim: set syntax=perl ts=4 ai si:

######################### IMPORTANT! - READ CAREFULLY ########################
# This file contains some parts of my own cleafeed.local.
# Many of these checks are too much content based than what I feel
# confortable to put in the official source and others are just
# experimental or need site-specific tweaks.
# Before using any of this code please *think*, and be sure you really
# understand what it does.
######################### IMPORTANT! - READ CAREFULLY ########################

my @badaspnntps = (
	'PostIT Now',
	'Jobsearch Limited',
	'AudioWeb',					# audioweb.com
	'Alex',						# sex spam
	'Paul Simmons',				# OperationIT.com
	'Alan',						# equest.com
	'Digital Media Works',		# html sex spam
	'Captive Technology',		# ccsscorp.com jobs flood
	'Computer Horzions ISG',	# isgjobs.com jobs flood
	'Mike Powers',				# ResumeGateway.com jobs flood
);

my %badaspnntp = map { $_ => 1 } @badaspnntps;
undef @badaspnntps;

sub local_filter_first {
#	if ($gr{binary} and not is_binary()) {
#			saveart('is_binary')
#	};

	my $localpost = 0;
	$localpost = 1 if $hdr{'X-Trace'} and $hdr{'X-Trace'} =~ /\.mixmin\.net/;
	$localpost = 1 if $hdr{Path} =~ /^not\-for\-mail$/;
	$localpost = 1 if $hdr{Path} =~ /^news\.mixmin\.net!not-for-mail/;
	$localpost = 1 if $hdr{'X-Complaints-To'} =~ /abuse\@mixmin\.net/;

	study $hdr{__BODY__} if $hdr{__LINES__} <= 250;

	# local posts
	if ($localpost) {
		if ($hdr{Approved}) {
		    foreach (@groups) {
				if (not /^(?:alt|news\.admin\.net-abuse)\./) {
					saveart('CF.approved');
					return reject("Forged approval in $_ ($hdr{Approved})");
				};
		    };
		};
	};

	if ($hdr{Path} =~ /alt\.net.*alt\.net/) {
		saveart('path-preload');
	};

	if ($hdr{__BODY__} =~ /mixmin\.net[^\>]/ and
		$hdr{From} !~ /mixmin\.net/ and
		$hdr{Newsgroups} !~ /alt\.privacy\.anon-server\.stats/) {
		saveart('about-me')
	};

	if (not $hdr{References} and
			$hdr{'X-Trace'} =~ /posting\.google\.com/ and
			not $gr{reports}) {
		if ($hdr{Subject} =~ /
				cheap.*wholesale
			|	wholesale.*cheap
			|	^\(CN-CIRCLE
			|	china.*(?:shoes|sandals|sneakers|clothes|bags|jeans|caps|
						  watch)
			|	shoes.*(?:gucci|parda|chanel|puma|hogan|bape|armani|ugg|ice|
			              versace)
			/imx) {
			saveart('subject');
			return reject('Subject Rejected');
		};
		if ($hdr{__BODY__} =~ /www\.\S*(?:
			replica|shoes|watches|wholesale|allnicesneakers|
			Xecure|CryptoSMS|CryptoGraf|Cop2p|getvogue
			)\S*\.\w{2}/imx) {
			saveart('url');
			return reject('URL Rejected');
		};
	};
};

sub local_filter_bot {
	if ($hdr{'X-Newsreader'}) {
		if ($hdr{'X-Newsreader'} =~ /^AspNNTP \S+ \((.*)\)/) {
			return reject('AspNNTP', 'Bot signature')
				if exists $badaspnntp{$1};
			#saveart('W.aspnntp', $hdr{'X-Newsreader'});
		};
	};
};

sub local_filter_last {
	if (not $hdr{References} and 
	    $hdr{__LINES__} > 25 and
		$hdr{__LINES__} < 150 and
		scalar @groups > 4 and
		scalar @followups > 4) {
        if ($hdr{__BODY__} =~ /MI5/ or
            $hdr{Subject} =~ /M.{1,3}I.{1,3}5/) {
	        saveart('mi5');
	        return reject('MI5 Filter');
		};
	};

	my $localpost = 0;
	$localpost = 1 if $hdr{'X-Trace'} and $hdr{'X-Trace'} =~ /\.mixmin\.net/;
	$localpost = 1 if $hdr{Path} =~ /^not\-for\-mail$/;
	$localpost = 1 if $hdr{Path} =~ /^news\.mixmin\.net!not-for-mail/;
	$localpost = 1 if $hdr{'Message-ID'} =~ /\@news\.mixmin\.net>$/;
	$localpost = 1 if $hdr{'X-Complaints-To'} =~ /abuse\@mixmin\.net/;

	if ($localpost) {
		saveart('local.post');
	};

	if ($config{watch_cancels} and $localpost) {
		$LocalPosts{$hdr{'Message-ID'}} = $now;
	}

#	saveart('W.longsubj') if length $hdr{Subject} > 160;
#	saveart('W.space') if $hdr{Subject} =~ / {15,}[^ ]/;
	saveart('W.repostnotrej')
		if $hdr{Subject} =~ /^REPOST: / and $hdr{Path} =~ /!resurrector!/;
	return '';
};

sub local_filter_cancel {
	my $localpost = 0;
	$localpost = 1 if $hdr{'X-Trace'} and $hdr{'X-Trace'} =~ /\.mixmin\.net /;
	$localpost = 1 if $hdr{Path} =~ /^not\-for\-mail$/;
	$localpost = 1 if $hdr{Path} =~ /^news\.mixmin\.net!not-for-mail/;
	$localpost = 1 if $hdr{'Message-ID'} =~ /\@news\.mixmin\.net>$/;
	$localpost = 1 if $hdr{'X-Complaints-To'} =~ /abuse\@mixmin\.net/;

	if ($localpost) {
		saveart('local.cancel');
		return reject('Cancels forbidden');
	};
};

# here I save some articles I want to check.
sub local_filter_reject {
	my ($vr, $sr) = @_;

	saveart('local.reject', $vr)
		if $hdr{Path} =~ /^not\-for\-mail$/ or
		   $hdr{Path} =~ /^news\.mixmin\.net!not-for-mail/;
	#saveart('w.supersedes') if $vr =~ /^Excessive Supersedes/;
	#saveart('cf.newsagent', $vr) if $vr =~ /^NewsAgent/;
	#saveart('cf.sex', $vr) if $vr =~ /^Sex spam/ and $lines < 300;
	saveart('emp.phn', $vr) if $vr =~ /^EMP\s\(phn/;
	saveart('emp.phr', $vr) if $vr =~ /^EMP\s\(phr/;
	saveart('emp.phl', $vr) if $vr =~ /^EMP\s\(phl/;
	saveart('emp.fsl', $vr) if $vr =~ /^EMP\s\(fsl/;
	if (is_binary()) {
		saveart('emp.md5.bin', $vr) if $vr =~ /^EMP\s\(md5/;
		saveart('cf.scoring', $vr, 2) if $vr =~ /^Scoring filter/;
	} else {
		saveart('emp.md5', $vr) if $vr =~ /^EMP\s\(md5/;
		saveart('cf.scoring', $vr) if $vr =~ /^Scoring filter/;
	}
	# Save articles rejected by bad_hosts.
	saveart('cf.hosts', $vr) if $vr =~ /^Bad\shost/;
	# Provide a seed for bad_hosts_central.
	saveart('badhosts', $vr, 3) if $vr =~ /^EMP|^Bad\shost|^URL/
		and $hdr{'NNTP-Posting-Host'}
		and not $gr{alltest};
	saveart('cf.uuenc', $vr) if $vr =~ /^UUencoded/;
	saveart('cf.binary', $vr) if $vr =~ /^Binary/;
	#saveart('r.nanacancel') if $vr eq 'Cancel in forbidden group';

	return @_;
}

sub local_config {
	%config_local = (
		block_late_cancels => 1,
		block_user_cancels => 1,
		active_file => '/usr/local/news/db/active',
		statfile => '/usr/local/news/cleanfeed/cleanfeed.stats',
#		html_statfile => '/news/log/cleanfeed.stats.html',
		stats_interval => 300,
		do_scoring_filter => 0,
		do_emp_dump => 1,
		emp_dump_file => '/usr/local/news/tmp/empdump',
		md5_skips_followups => 0,
		debug_batch_directory => '/usr/local/news/cleanfeed/log',
		flood_groups => '^sci\.crypt$|^news\.software\.nntp$|^alt\.free\.newsservers',
		MD5RateCutoff => 3,
		PHNRateBaseInterval => 1800,
		PHRRateBaseInterval => 1800,
		maxgroups => 6,
		low_xpost_maxgroups => 3,
		meow_ext_maxgroups => 2,
		low_xpost_groups => 'test|jobs|forsale',
		reject_suspect_cancels => 1,
	);

	%config_append = (
		allexclude => '^fa\.linux\.kernel|^microsoft\.',
		bin_allowed => '^alt\.mag\.',
		phn_exempt => 'bristol.highgroove.com',
		phn_exclude => 'uk.people.silversurfers',
		spam_report_groups => 'local.test',
	);

	$Restricted_Groups{netscape} = '^netscape\.';

	$config{block_user_cancels} = 1;
	$config{reject_suspect_cancels} = 1;
	$config{watch_cancels} = 0;
	if ($config{watch_cancels}) {
		eval { require AnyDBM_File; import AnyDBM_File;
				require Fcntl; import Fcntl; }; # XXX ugly
		if ($@) {
			$config{watch_cancels} = undef;
			slog('E', 'Cannot load AnyDBM_File: ' . $@);
		}
		tie %LocalPosts, 'AnyDBM_File', "$config_dir/posts",
				&Fcntl::O_CREAT|&Fcntl::O_RDWR, 0666
			or slog('E', 'Cannot load AnyDBM_File: ' . $!);
	}
}

print $now.$config_dir.$lines.%Restricted_Groups.%Moderated.%config_local.%config_append.@followups if 0; # lint food

1;
